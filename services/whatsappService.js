const twilio = require('twilio');

/**
 * WhatsApp Service - Handles Twilio WhatsApp API operations
 */
class WhatsAppService {
  constructor(accountSid, authToken, phoneNumber) {
    this.client = twilio(accountSid, authToken);
    this.phoneNumber = phoneNumber;
  }

  /**
   * Send WhatsApp message
   * @param {string} to - Recipient phone number
   * @param {string} message - Message text
   * @returns {Promise<Object>} Message response
   */
  async sendMessage(to, message) {
    try {
      const response = await this.client.messages.create({
        body: message,
        from: this.phoneNumber,
        to: to
      });
      
      console.log(`‚úÖ Message sent to ${to}: ${response.sid}`);
      return response;
    } catch (error) {
      // Handle specific Twilio errors
      if (error.code === 63038) {
        console.warn(`‚ö†Ô∏è Daily message limit exceeded for ${to}. Order processed but notification not sent.`);
        return { 
          success: false, 
          error: 'DAILY_LIMIT_EXCEEDED',
          message: 'Daily message limit exceeded' 
        };
      } else if (error.code === 21211) {
        console.warn(`‚ö†Ô∏è Invalid phone number: ${to}`);
        return { 
          success: false, 
          error: 'INVALID_PHONE_NUMBER',
          message: 'Invalid phone number' 
        };
      } else {
        console.error('‚ùå Error sending WhatsApp message:', error.message || error);
        return { 
          success: false, 
          error: 'SEND_ERROR',
          message: error.message || 'Unknown error' 
        };
      }
    }
  }

  /**
   * Send order confirmation to customer
   * @param {string} customerPhone - Customer phone number
   * @param {Object} order - Order object
   * @returns {Promise<Object>} Message response
   */
  async sendOrderConfirmation(customerPhone, order) {
    const message = this.formatOrderConfirmation(order);
    const result = await this.sendMessage(customerPhone, message);
    
    if (result.success === false) {
      console.log(`üìù Order ${order.orderId} processed but customer notification failed: ${result.message}`);
      this.logOrderFallback(order, 'customer');
    }
    
    return result;
  }

  /**
   * Send order notification to restaurant owner
   * @param {string} ownerPhone - Owner phone number
   * @param {Object} order - Order object
   * @returns {Promise<Object>} Message response
   */
  async sendOwnerNotification(ownerPhone, order) {
    const message = this.formatOwnerNotification(order);
    const result = await this.sendMessage(ownerPhone, message);
    
    if (result.success === false) {
      console.log(`üìù Order ${order.orderId} processed but owner notification failed: ${result.message}`);
      this.logOrderFallback(order, 'owner');
    }
    
    return result;
  }

  /**
   * Format order confirmation message for customer
   * @param {Object} order - Order object
   * @returns {string} Formatted message
   */
  formatOrderConfirmation(order) {
    let message = `üéâ *Thank you for your order!*\n\n`;
    message += `üìã Order ID: *${order.orderId}*\n`;
    message += `üìÖ Date: ${order.orderDate.toLocaleDateString()}\n`;
    message += `üïê Time: ${order.orderDate.toLocaleTimeString()}\n\n`;
    
    message += `üõçÔ∏è *Your Order:*\n`;
    order.items.forEach(item => {
      message += `‚Ä¢ ${item.quantity}x ${item.name} - ‚Çπ${item.total.toFixed(2)}\n`;
    });
    
    message += `\nüí∞ *Total: ‚Çπ${order.totalAmount.toFixed(2)}*\n\n`;
    message += `‚è±Ô∏è Estimated preparation time: 15-20 minutes\n`;
    message += `üì± We'll send you updates about your order status\n\n`;
    message += `üôè Thank you for choosing us!`;
    
    return message;
  }

  /**
   * Format owner notification message
   * @param {Object} order - Order object
   * @returns {string} Formatted message
   */
  formatOwnerNotification(order) {
    let message = `üîî *NEW ORDER RECEIVED*\n\n`;
    message += `üìã Order ID: *${order.orderId}*\n`;
    message += `üë§ Customer: ${order.customerName}\n`;
    message += `üìû Phone: ${order.customerPhone}\n`;
    
    // Add delivery location information
    if (order.deliveryAddress && order.deliveryAddress.trim()) {
      message += `üìç *Delivery Location:*\n`;
      message += `   ${order.deliveryAddress}\n`;
    }
    
    message += `üìÖ Time: ${order.orderDate.toLocaleTimeString()}\n\n`;
    
    message += `üìù *Items:*\n`;
    order.items.forEach(item => {
      message += `‚Ä¢ ${item.quantity}x ${item.name}\n`;
    });
    
    message += `\nüí∞ *Total: ‚Çπ${parseFloat(order.totalAmount).toFixed(2)}*\n\n`;
    
    // Add location-based urgency indicators
    if (order.deliveryAddress) {
      const location = order.deliveryAddress.toLowerCase();
      if (location.includes('hospital') || location.includes('emergency')) {
        message += `üö® *HIGH PRIORITY - HOSPITAL/EMERGENCY*\n`;
      } else if (location.includes('airport') || location.includes('station') || location.includes('railway')) {
        message += `‚ö° *URGENT - TRAVEL LOCATION*\n`;
      } else if (location.includes('office') && location.includes('late')) {
        message += `üè¢ *WORK URGENCY - LATE OFFICE*\n`;
      }
    }
    
    message += `‚ö° Please prepare this order and update the status accordingly.`;
    
    return message;
  }

  /**
   * Send welcome message
   * @param {string} to - Recipient phone number
   * @param {string} customerName - Customer name
   * @returns {Promise<Object>} Message response
   */
  async sendWelcomeMessage(to, customerName = 'Customer') {
    const message = `üëã Welcome to our restaurant, ${customerName}!\n\n` +
      `üçΩÔ∏è You can:\n` +
      `‚Ä¢ Type 'menu' or 'hi' to see today's menu\n` +
      `‚Ä¢ Place orders like: 'Order 2 Chicken Biryani'\n` +
      `‚Ä¢ Use item numbers: 'Order 1 item 3'\n` +
      `‚Ä¢ Ask for 'help' if you need assistance\n\n` +
      `We're here to serve you delicious food! üòä`;
    
    return await this.sendMessage(to, message);
  }

  /**
   * Send help message
   * @param {string} to - Recipient phone number
   * @returns {Promise<Object>} Message response
   */
  async sendHelpMessage(to) {
    const message = `‚ùì *How to use our WhatsApp ordering system:*\n\n` +
      `üìã *Commands:*\n` +
      `‚Ä¢ 'menu' or 'hi' - View today's menu\n` +
      `‚Ä¢ 'order [quantity] [item name]' - Place an order\n` +
      `‚Ä¢ 'order [quantity] item [number]' - Order by item number\n` +
      `‚Ä¢ 'help' - Show this help message\n` +
      `‚Ä¢ 'status' - Check your recent orders\n\n` +
      `üì± *Examples:*\n` +
      `‚Ä¢ "Order 2 Chicken Biryani"\n` +
      `‚Ä¢ "Order 1 item 3"\n` +
      `‚Ä¢ "Order 3 #1"\n\n` +
      `üí° Need assistance? Just ask us anything!`;
    
    return await this.sendMessage(to, message);
  }

  /**
   * Send order status update
   * @param {string} customerPhone - Customer phone number
   * @param {Object} order - Order object
   * @param {string} status - New status
   * @returns {Promise<Object>} Message response
   */
  async sendStatusUpdate(customerPhone, order, status) {
    const statusMessages = {
      confirmed: `‚úÖ Your order #${order.orderId} has been confirmed and is being prepared!`,
      preparing: `üë®‚Äçüç≥ Your order #${order.orderId} is being prepared with love!`,
      ready: `üéâ Great news! Your order #${order.orderId} is ready for pickup/delivery!`,
      completed: `‚úÖ *Order Completed!*\n\nüéâ Your order #${order.orderId} has been completed and is ready for pickup!\nüí∞ Total: ‚Çπ${parseFloat(order.totalAmount).toFixed(2)}\n\nüìç Please come to collect your order.\nThank you for choosing us! üòä`,
      delivered: `üì¶ Your order #${order.orderId} has been delivered. Enjoy your meal! üòä`,
      cancelled: `‚ùå Sorry, your order #${order.orderId} has been cancelled. Please contact us for details.`
    };

    const message = statusMessages[status] || `üìä Order #${order.orderId} status updated to: ${status}`;
    return await this.sendMessage(customerPhone, message);
  }

  /**
   * Log order for fallback when WhatsApp fails
   * @param {Object} order - Order object
   * @param {string} type - Type of notification (customer/owner)
   */
  logOrderFallback(order, type) {
    const timestamp = new Date().toISOString();
    const logEntry = {
      timestamp,
      type,
      orderId: order.orderId,
      customer: order.customerName,
      phone: order.customerPhone,
      total: order.totalAmount,
      items: order.items.map(item => `${item.quantity}x ${item.name}`).join(', ')
    };

    console.log(`üìù FALLBACK NOTIFICATION LOG (${type.toUpperCase()}):`, JSON.stringify(logEntry, null, 2));
    
    // You could also write to a file or send to an email service here
    // Example: fs.appendFileSync('fallback-notifications.log', JSON.stringify(logEntry) + '\n');
  }
}

module.exports = WhatsAppService;
